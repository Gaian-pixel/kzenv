#!/usr/bin/env bash

[ -n "${KZENV_DEBUG}" ] && set -x
source "${KZENV_ROOT}/libexec/helpers"

[ "${#}" -gt 1 ] && error_and_die "usage: kzenv install [<version>]"

declare version_requested version regex

if [ -z "${1}" ]; then
  version_file="$(kzenv-version-file)"
  if [ "${version_file}" != "${KZENV_ROOT}/version" ]; then
    version_requested="$(cat "${version_file}" || true)"
  fi
else
  version_requested="${1}"
fi

if [[ "${version_requested}" =~ ^min-required$ ]]; then
  echo "Detecting minimal required version..."
  found_min_required="$(kzenv-min-required)"

  if [[ $? -eq 0 ]]; then
      echo "Min required version is detected as ${found_min_required}"
      version_requested="${found_min_required}"
  else
    exit 1
  fi
fi

if [[ "${version_requested}" =~ ^latest\:.*$ ]]; then
  version="${version_requested%%\:*}"
  regex="${version_requested##*\:}"
elif [[ "${version_requested}" =~ ^latest$ ]]; then
  version="${version_requested}"
  regex="^[0-9]\+\.[0-9]\+\.[0-9]\+$"
else
  version="${version_requested}"
  regex="^${version_requested}$"
fi

[ -n "${version}" ] || error_and_die "Version is not specified"

# Comment 2 next lines to check version from GithubAPI
version="$(kzenv-list-remote | grep -e "${regex}" | head -n 1)"
[ -n "${version}" ] || error_and_die "No versions matching '${1}' found in remote"

dst_path="${KZENV_ROOT}/versions/${version}"
if [ -f "${dst_path}/kustomize" ]; then
  echo "Kustomize v${version} is already installed"
  exit 0
fi

KZENV_ARCH="${KZENV_ARCH:-amd64}"
case "$(uname -s)" in
  Darwin*)
    os="darwin_${KZENV_ARCH}"
    ;;
  MINGW64*)
    os="windows_${KZENV_ARCH}"
    ;;
  MSYS_NT*)
    os="windows_${KZENV_ARCH}"
    ;;
  CYGWIN_NT*)
    os="windows_${KZENV_ARCH}"
    ;;
  *)
    os="linux_${KZENV_ARCH}"
    ;;
esac

#
# Kustomize releases assets
# ==============================
#
# https://github.com/kubernetes-sigs/kustomize/releases/download/kustomize/v3.4.0/kustomize_v3.4.0_linux_amd64.tar.gz
# https://github.com/kubernetes-sigs/kustomize/releases/download/kustomize/v3.4.0/checksums.txt
# https://github.com/kubernetes-sigs/kustomize/releases/download/kustomize/v3.3.0/kustomize_v3.3.0_linux_amd64.tar.gz
#
# https://github.com/kubernetes-sigs/kustomize/releases/download/kustomize/v3.2.3/kustomize_kustomize.v3.2.3_linux_amd64
# https://github.com/kubernetes-sigs/kustomize/releases/download/kustomize/v3.2.2/kustomize_kustomize.v3.2.2_linux_amd64
# https://github.com/kubernetes-sigs/kustomize/releases/download/kustomize/v3.2.1/kustomize_kustomize.v3.2.1_linux_amd64
# https://github.com/kubernetes-sigs/kustomize/releases/download/kustomize/v3.2.1/checksums.txt
#
# https://github.com/kubernetes-sigs/kustomize/releases/download/v3.2.0/kustomize_3.2.0_linux_amd64
# https://github.com/kubernetes-sigs/kustomize/releases/download/v3.2.0/checksums.txt
# https://github.com/kubernetes-sigs/kustomize/releases/download/v3.1.0/kustomize_3.1.0_linux_amd64
# https://github.com/kubernetes-sigs/kustomize/releases/download/v3.0.3/kustomize_3.0.3_linux_amd64
# https://github.com/kubernetes-sigs/kustomize/releases/download/v2.1.0/kustomize_2.1.0_linux_amd64
# https://github.com/kubernetes-sigs/kustomize/releases/download/v2.0.3/kustomize_2.0.3_linux_amd64
# https://github.com/kubernetes-sigs/kustomize/releases/download/v1.0.11/kustomize_1.0.11_linux_amd64
#
# https://github.com/kubernetes-sigs/kustomize/releases/download/v1.0.1/kustomize_1.0.1_linux_amd64
# https://github.com/kubernetes-sigs/kustomize/releases/download/v1.0.1/checksums.txt
#
# ==============================

# echo "Version: ${version}"

KZENV_REMOTE="${KZENV_REMOTE:-${KZENV_REMOTE_DOWNLOAD}}"
if [[ "${version}" =~ 1.[0-9]+.[0-9]+|2.[0-9]+.[0-9]+|3.1.*|3.2.0 ]]; then
  tarball_name="kustomize_${version}_${os}"
  version_url="${KZENV_REMOTE}/v${version}/"
  shasums_url="${KZENV_REMOTE}/v${version}/checksums.txt"
elif [[ "${version}" =~ 3.2.1|3.2.3 ]]; then
  tarball_name="kustomize.v${version}_${os}"
  version_url="${KZENV_REMOTE}/kustomize/v${version}/kustomize_"
  shasums_url="${KZENV_REMOTE}/kustomize/v${version}/checksums.txt"
else
  tarball_name="kustomize_v${version}_${os}.tar.gz"
  version_url="${KZENV_REMOTE}/kustomize/v${version}/"
  shasums_url="${version_url}checksums.txt"
fi;
shasums_name="checksums.txt"

# echo "Kustomize ${version} : ${tarball_name}"
info "Installing Kustomize ${version}"

# Create a local temporary directory for downloads
download_tmp="$(mktemp -d kzenv_download.XXXXXX)" || error_and_die "Unable to create temporary download directory in $(pwd)"
# Clean it up in case of error
trap "rm -rf ${download_tmp}" EXIT;

info "Downloading release tarball from ${version_url}${tarball_name}"
curlw -# -fL -o "${download_tmp}/${tarball_name}" "${version_url}${tarball_name}" || error_and_die "Tarball download failed"
info "Downloading SHA hash file from ${shasums_url}"
curlw -s -fL -o "${download_tmp}/${shasums_name}" "${shasums_url}" || error_and_die "SHA256 hashes download failed"

shasum_bin="$(command -v shasum 2>/dev/null)"
if [[ -n "${shasum_bin}" && -x "${shasum_bin}" ]]; then
  (
    cd "${download_tmp}"
    "${shasum_bin}" \
      -a 256 \
      -s \
      -c <(grep -F "${tarball_name}" "${shasums_name}") || error_and_die "SHA256 hash does not match!"
  )
else
  # Lack of shasum deserves a proper warning
  warn_and_continue "No shasum tool available. Skipping SHA256 hash validation"
fi

mkdir -p "${dst_path}" || error_and_die "Failed to make directory ${dst_path}"

if [[ "${tarball_name}" =~ tar.gz ]]; then
  tar vxf "${download_tmp}/${tarball_name}" -C "${dst_path}" || error_and_die "Tarball failed"
else
  cp ${download_tmp}/${tarball_name} ${dst_path}/kustomize
fi
chmod +x ${dst_path}/kustomize

info "Installation of kustomize v${version} successful"
kzenv-use "${version}"
